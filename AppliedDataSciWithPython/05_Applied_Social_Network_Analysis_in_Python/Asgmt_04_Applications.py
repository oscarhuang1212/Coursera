# File name:   Asgmt_04_Applications.py
# Author:      Oscar Huang
# Description:  "Applied Data Science with Python" Specialization by University of Michigan on Coursera
#               Course5: Applied_Social_Network_Analysis_in_Python
#               Week4:   Applications

import networkx as nx
import pandas as pd
import numpy as np
import pickle


########################################################################
#           IMPORTANT: 
#           This code run under networkx 1.11
#           Need to be updated to networkx 1.2x version
########################################################################


"""
Part 1 - Random Graph Identification
    For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.
"""
P1_Graphs = pickle.load(open('A4_graphs','rb'))

"""
P1_Graphs is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:

    Preferential Attachment ('PA')
    Small World with low probability of rewiring ('SW_L')
    Small World with high probability of rewiring ('SW_H')

Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.

The graph_identification function should return a list of length 5 where each element in the list is either 'PA', 'SW_L', or 'SW_H'.
"""

def graph_identification():
    
    #ACC = [nx.average_clustering(G) for G in P1_Graphs]
    #ASPL = [nx.average_shortest_path_length(G) for G in P1_Graphs]
    #print([nx.info(G) for G in P1_Graphs])

    '''
    ACC:
        [0.03167539146454044,
        0.5642419635919628,
        0.4018222222222227,
        0.03780379975223251,
        0.0033037037037037037],
    
    ASPL:
        [4.099161161161161,
        5.089871871871872,
        9.378702269692925,
        3.1048046283934134,
        5.0785509568313305]


    nx.info for the five graphs:
    ['Name: barabasi_albert_graph(1000,2)       Type: Graph     Number of nodes: 1000   Number of edges: 1996   Average degree:   3.9920', 
     'Name: watts_strogatz_graph(1000,10,0.05)  Type: Graph     Number of nodes: 1000   Number of edges: 5000   Average degree:  10.0000', 
     'Name: watts_strogatz_graph(750,5,0.075)   Type: Graph     Number of nodes: 750    Number of edges: 1500   Average degree:   4.0000', 
     'Name: barabasi_albert_graph(750,4)        Type: Graph     Number of nodes: 750    Number of edges: 2984   Average degree:   7.9573', 
     'Name: watts_strogatz_graph(750,4,1)       Type: Graph     Number of nodes: 750    Number of edges: 1500   Average degree:   4.0000']
    '''    


    #Explanation need to be added
    return ['PA','SW_L','SW_L','PA','SW_H']




"""
Part 2 - Company Emails

    For the second part of this assignment you will be workking with a company's email network where each node corresponds to a person at the company, 
        and each edge indicates that at least one email has been sent between two people.
    The network also contains the node attributes Department and ManagementSalary.
    Department indicates the department in the company which the person belongs to, and ManagementSalary indicates whether that person is receiving 
        a management position salary.
"""

G = nx.read_gpickle('email_prediction.txt')


"""
Part 2A - Salary Prediction

    Using network G, identify the people in the network with missing values for the node attribute ManagementSalary and predict whether or not 
        these individuals are receiving a management position salary.
    To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have 
        ManagementSalary data, and predict a probability of the node receiving a management salary for nodes where ManagementSalary is missing.
    Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.
    The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

    Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, 
        and the index being the node id.

        Example:

            1       1.0
            2       0.0
            5       0.8
            8       1.0
                ...
            996     0.7
            1000    0.5
            1001    0.0
            Length: 252, dtype: float64
"""

def salary_predictions():
    def min_max_normalization(S):    
        return (S-np.min(S))/(np.max(S).astype(float)-np.min(S).astype(float))
    
    from sklearn.svm import SVC
    
    df = pd.DataFrame(index=G.nodes())
    df['clustering'] = min_max_normalization(pd.Series(nx.clustering(G)))
    
    df['degree'] = min_max_normalization(pd.Series(G.degree()))
    df['betweenness_centrality']= min_max_normalization(pd.Series(nx.betweenness_centrality(G)))
    df['Department'] = min_max_normalization(pd.Series(nx.get_node_attributes(G,'Department')))
    df['ManagementSalary'] = pd.Series(nx.get_node_attributes(G,'ManagementSalary'))
    df_train = df[df['ManagementSalary'].notnull()]
    df_train_X = df_train.drop('ManagementSalary', axis = 1)
    df_train_y = df_train['ManagementSalary'].astype(str)
    
    
    df_test = df[df['ManagementSalary'].isnull()]
    df_test_X = df_test.drop('ManagementSalary', axis = 1)
    
    clf = SVC(probability=True)
    clf.fit(df_train_X,df_train_y)

    return pd.Series(clf.predict_proba(df_test_X)[:,1],index = df_test_X.index)
    


"""
Part 2B - New Connections Prediction

    For the last part of this assignment, you will predict future connections between employees of the network. 
        The future connections information has been loaded into the variable future_connections. The index is a tuple indicating 
        a pair of nodes that currently do not have a connection, and the Future Connection column indicates if an edge between those two nodes 
        will exist in the future, where a value of 1.0 indicates a future connection.
"""

future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})


"""
    Using network G and future_connections, identify the edges in future_connections with missing values and predict whether or not these edges will 
        have a future connection.
    To accomplish this, you will need to create a matrix of features for the edges found in future_connections using networkx, train a 
        sklearn classifier on those edges in future_connections that have Future Connection data, and predict a probability of the edge being a 
        future connection for those edges in future_connections where Future Connection is missing.

    Your predictions will need to be given as the probability of the corresponding edge being a future connection.
    The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

    Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, 
        and the index being the edge as represented by a tuple of nodes.

    Example:

        (107, 348)    0.35
        (542, 751)    0.40
        (20, 426)     0.55
        (50, 989)     0.35
                ...
        (939, 940)    0.15
        (555, 905)    0.35
        (75, 101)     0.65
        Length: 122112, dtype: float64
"""

def new_connections_predictions():

    from sklearn.linear_model import LogisticRegression 
    
    df = future_connections
    df['Adamic'] = [i[2] for i in nx.adamic_adar_index(G,df.index)]
    df['JC'] = [i[2] for i in nx.jaccard_coefficient(G,df.index)]
    
    
    df_test = df[df['Future Connection'].isnull()]
    df_train = df[df['Future Connection'].notnull()]
    
    df_train_X = df_train.drop('Future Connection', axis = 1)
    df_train_y = df_train['Future Connection'].astype(str)
    
    df_test_X = df_test.drop('Future Connection', axis = 1)
    
    clf = LogisticRegression()
    clf.fit(df_train_X,df_train_y)

    return pd.Series(clf.predict_proba(df_test_X)[:,1],index = df_test_X.index)

print(new_connections_predictions())

